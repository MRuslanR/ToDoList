from celery import Celery
from app import app
import redis
import json
from datetime import datetime, timedelta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
r = redis.Redis(host='redis', port=6379, db=0)

def make_celery(app):
    celery = Celery(
        app.import_name,
        broker=app.config['CELERY_BROKER_URL'],
        backend=app.config['CELERY_RESULT_BACKEND']
    )
    celery.conf.update(app.config)
    class ContextTask(celery.Task):
        def __call__(self, *args, **kwargs):
            with app.app_context():
                return super().__call__(*args, **kwargs)
    celery.Task = ContextTask
    return celery

celery = make_celery(app)

def revoke_task(task_id):
    try:
        celery.control.revoke(task_id, terminate=True)
        print(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ Celery —Å id: {task_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ {task_id}: {e}")

@celery.task(name='schedule_deadline_reminder')
def schedule_deadline_reminder(chat_id, task_id, task_title):
    """
    –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É.
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏,
    –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ ‚Äì 1 –¥–µ–Ω—å) —É–≤–µ–¥–æ–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã—á–µ—Ä–∫–Ω—É—Ç–∞, –∏ –∏–∑–º–µ–Ω–∏—Ç –µ—ë —Å—Ç–∞—Ç—É—Å.
    """
    from app.models import Task  # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    task = Task.get_task_by_id(task_id)
    if task and not task.get("completed"):
        send_to_bot(chat_id, f"–î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ {task_title} –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É üíÄ. –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 1 –¥–µ–Ω—å, –ø–æ—Å–ª–µ —á–µ–≥–æ - –≤—ã—á–µ—Ä–∫–Ω—É—Ç–∞.")
        print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏ {task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º finalize_task —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –≤–º–µ—Å—Ç–æ 1 –¥–Ω—è)
        finalize_eta = datetime.utcnow() + timedelta(days=1)
        finalize_task.apply_async(eta=finalize_eta, args=[chat_id, task_id, task_title])
    else:
        print(f"–ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

@celery.task(name='schedule_single_reminder')
def schedule_single_reminder(chat_id, task_id, task_title, reminder_time):
    """
    –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä reminder_time –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ UTC.
    """
    from app.models import Task
    task = Task.get_task_by_id(task_id)
    if task and not task.get("completed"):
        send_to_bot(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_title} üîî")
        print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ {reminder_time} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        print(f"–ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

@celery.task(name='finalize_task')
def finalize_task(chat_id, task_id, task_title):
    """
    –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞.
    –û–Ω–∞ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã—á–µ—Ä–∫–Ω—É—Ç–∞, –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ—ë —Å—Ç–∞—Ç—É—Å.
    """
    from app.models import Task
    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π (–≤—ã—á–µ—Ä–∫–Ω—É—Ç—É—é)
    Task.update_task_status(task_id, True)
    send_to_bot(chat_id, f"–ó–∞–¥–∞—á–∞ {task_title} –≤—ã—á–µ—Ä–∫–Ω—É—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –¥–µ–¥–ª–∞–π–Ω –∏—Å—Ç–µ–∫ ‚úèÔ∏è")
    print(f"–ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –≤—ã—á–µ—Ä–∫–Ω—É—Ç–∞.")

def send_to_bot(chat_id, message):
    try:
        payload = json.dumps({
            'chat_id': chat_id,
            'message': message
        })
        r.publish('bot_commands', payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
