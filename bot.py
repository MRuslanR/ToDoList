import telebot
from telebot import types
import redis
import json
import requests
import threading
from datetime import datetime
import pytz
from tokens import TOKEN

token = TOKEN # –í–í–ï–°–¢–ò –¢–û–ö–ï–ù
bot = telebot.TeleBot(TOKEN)
r = redis.Redis(host='redis', port=6379, db=0)

def get_auth_inline_keyboard(chat_id):
    auth_url = f"http://127.0.0.1:5000/auto_auth?chat_id={chat_id}"
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", url=auth_url)
    markup.add(button)
    return markup

def get_main_panel_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_login = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    button_list = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–µ–ª")
    markup.row(button_login, button_list)
    return markup

def redis_listener():
    pubsub = r.pubsub()
    pubsub.subscribe('bot_commands')
    for message in pubsub.listen():
        if message['type'] == 'message':
            try:
                data = json.loads(message['data'])
                chat_id = data['chat_id']
                text = data['message']
                bot.send_message(chat_id, text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis: {e}")

def format_time_diff(deadline_str, target_tz='Europe/Moscow'):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π (ISO-—Ñ–æ—Ä–º–∞—Ç) –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –≤—Ä–µ–º–µ–Ω–∏.
    –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–æ—Å—Ç–∞–ª–æ—Å—å HH —á MM –º SS —Å",
    –∏–Ω–∞—á–µ ‚Äì "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ HH —á MM –º SS —Å".

    –ú—ã –≤—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤, –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å
    –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è timedelta (–Ω–∞–ø—Ä–∏–º–µ—Ä, "-1 day, 21:00:00").
    """
    try:
        deadline = datetime.fromisoformat(deadline_str)
    except Exception as e:
        return ""
    local_tz = pytz.timezone(target_tz)
    # –ï—Å–ª–∏ deadline –Ω–µ –∏–º–µ–µ—Ç tzinfo, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω –≤–≤–µ–¥—ë–Ω –≤ target_tz
    if deadline.tzinfo is None:
        deadline = local_tz.localize(deadline)
    else:
        deadline = deadline.astimezone(local_tz)
    now = datetime.now(local_tz)
    diff = deadline - now
    total_seconds = diff.total_seconds()
    abs_diff = abs(diff)
    hours = int(abs_diff.total_seconds() // 3600)
    minutes = int((abs_diff.total_seconds() % 3600) // 60)
    seconds = int(abs_diff.total_seconds() % 60)
    time_str = f"{hours} —á {minutes} –º {seconds} —Å"
    if total_seconds > 0:
        return f"–æ—Å—Ç–∞–ª–æ—Å—å {time_str}"
    else:
        return f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {time_str}"


@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = str(message.chat.id)
    try:
        response = requests.post(
            'http://web:5000/register',
            json={'chat_id': chat_id},
            timeout=5
        )
        if response.status_code == 201:
            welcome_text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"
        elif response.status_code == 409:
            welcome_text = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_markup = get_auth_inline_keyboard(chat_id)
        bot.send_message(message.chat.id, welcome_text, reply_markup=auth_markup)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–≤–æ–π—Ç–∏" –∏ "—Å–ø–∏—Å–æ–∫ –¥–µ–ª"
        panel_markup = get_main_panel_keyboard()
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=panel_markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text.lower() == "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
def handle_login(message):
    chat_id = str(message.chat.id)
    auth_markup = get_auth_inline_keyboard(chat_id)
    bot.send_message(message.chat.id, "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=auth_markup)

@bot.message_handler(func=lambda message: message.text.lower() == "—Å–ø–∏—Å–æ–∫ –¥–µ–ª")
def handle_list_tasks(message):
    chat_id = str(message.chat.id)
    try:
        response = requests.get(
            'http://web:5000/api/tasks',
            params={'chat_id': chat_id},
            timeout=5
        )
        if response.status_code == 200:
            tasks = response.json()
            if tasks:
                message_text = "–í–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª üóí:\n"
                for task in tasks:
                    title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    deadline_str = task.get('deadline', '')
                    time_status = format_time_diff(deadline_str) if deadline_str else ""
                    if not(task.get('completed')):
                        message_text += f"{title}: {time_status}\n"
            else:
                message_text = "–°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç."
            if message_text == "–í–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª üóí:\n":
                message_text = "–°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç."
            bot.send_message(message.chat.id, message_text)
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª: {e}")
        bot.send_message(message.chat.id, "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å Redis –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=redis_listener)
    thread.daemon = True
    thread.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
